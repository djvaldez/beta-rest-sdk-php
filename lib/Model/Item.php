<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;
/**
 * Item Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     CyberSource
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Item implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'product_code' => 'string',
        'quantity' => 'string',
        'product_sku' => 'string',
        'product_name' => 'string',
        'product_type' => 'string',
        'unit_price' => 'string',
        'tax_amount' => 'string',
        'currency' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'product_code' => 'productCode',
        'quantity' => 'quantity',
        'product_sku' => 'productSKU',
        'product_name' => 'productName',
        'product_type' => 'productType',
        'unit_price' => 'unitPrice',
        'tax_amount' => 'taxAmount',
        'currency' => 'currency'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'product_code' => 'setProductCode',
        'quantity' => 'setQuantity',
        'product_sku' => 'setProductSku',
        'product_name' => 'setProductName',
        'product_type' => 'setProductType',
        'unit_price' => 'setUnitPrice',
        'tax_amount' => 'setTaxAmount',
        'currency' => 'setCurrency'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'product_code' => 'getProductCode',
        'quantity' => 'getQuantity',
        'product_sku' => 'getProductSku',
        'product_name' => 'getProductName',
        'product_type' => 'getProductType',
        'unit_price' => 'getUnitPrice',
        'tax_amount' => 'getTaxAmount',
        'currency' => 'getCurrency'
    );
  
    
    /**
      * $product_code Type of product. This value is used to determine the category that the product is in: electronic, handling, physical, service, or shipping.
      * @var string
      */
    protected $product_code;
    
    /**
      * $quantity The default is 1.  This field is required when product_code is not default or one of the values related to shipping and handling
      * @var string
      */
    protected $quantity;
    
    /**
      * $product_sku Identification code for the product.
      * @var string
      */
    protected $product_sku;
    
    /**
      * $product_name This field is required when product_code is not default or one of the values related to shipping and handling
      * @var string
      */
    protected $product_name;
    
    /**
      * $product_type 
      * @var string
      */
    protected $product_type;
    
    /**
      * $unit_price Per-item price of the product. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters
      * @var string
      */
    protected $unit_price;
    
    /**
      * $tax_amount  Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. 
      * @var string
      */
    protected $tax_amount;
    
    /**
      * $currency Per-item currency
      * @var string
      */
    protected $currency;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->product_code = $data["product_code"];
            $this->quantity = $data["quantity"];
            $this->product_sku = $data["product_sku"];
            $this->product_name = $data["product_name"];
            $this->product_type = $data["product_type"];
            $this->unit_price = $data["unit_price"];
            $this->tax_amount = $data["tax_amount"];
            $this->currency = $data["currency"];
        }
    }
    
    /**
     * Gets product_code
     * @return string
     */
    public function getProductCode()
    {
        return $this->product_code;
    }
  
    /**
     * Sets product_code
     * @param string $product_code Type of product. This value is used to determine the category that the product is in: electronic, handling, physical, service, or shipping.
     * @return $this
     */
    public function setProductCode($product_code)
    {
        
        $this->product_code = $product_code;
        return $this;
    }
    
    /**
     * Gets quantity
     * @return string
     */
    public function getQuantity()
    {
        return $this->quantity;
    }
  
    /**
     * Sets quantity
     * @param string $quantity The default is 1.  This field is required when product_code is not default or one of the values related to shipping and handling
     * @return $this
     */
    public function setQuantity($quantity)
    {
        
        $this->quantity = $quantity;
        return $this;
    }
    
    /**
     * Gets product_sku
     * @return string
     */
    public function getProductSku()
    {
        return $this->product_sku;
    }
  
    /**
     * Sets product_sku
     * @param string $product_sku Identification code for the product.
     * @return $this
     */
    public function setProductSku($product_sku)
    {
        
        $this->product_sku = $product_sku;
        return $this;
    }
    
    /**
     * Gets product_name
     * @return string
     */
    public function getProductName()
    {
        return $this->product_name;
    }
  
    /**
     * Sets product_name
     * @param string $product_name This field is required when product_code is not default or one of the values related to shipping and handling
     * @return $this
     */
    public function setProductName($product_name)
    {
        
        $this->product_name = $product_name;
        return $this;
    }
    
    /**
     * Gets product_type
     * @return string
     */
    public function getProductType()
    {
        return $this->product_type;
    }
  
    /**
     * Sets product_type
     * @param string $product_type 
     * @return $this
     */
    public function setProductType($product_type)
    {
        
        $this->product_type = $product_type;
        return $this;
    }
    
    /**
     * Gets unit_price
     * @return string
     */
    public function getUnitPrice()
    {
        return $this->unit_price;
    }
  
    /**
     * Sets unit_price
     * @param string $unit_price Per-item price of the product. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        
        $this->unit_price = $unit_price;
        return $this;
    }
    
    /**
     * Gets tax_amount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->tax_amount;
    }
  
    /**
     * Sets tax_amount
     * @param string $tax_amount  Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. 
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        
        $this->tax_amount = $tax_amount;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency Per-item currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
