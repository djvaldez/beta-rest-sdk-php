<?php
/**
 * SearchResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;
/**
 * SearchResult Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     CyberSource
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchResult implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'account_suffix' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'amount' => 'string',
        'currency' => 'string',
        'status' => 'string',
        'reference_id' => 'string',
        'request_date_time' => 'string',
        'merchant_timezone' => 'string',
        'card_type' => 'string',
        '_links' => '\CyberSource\Model\Links'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'account_suffix' => 'accountSuffix',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'amount' => 'amount',
        'currency' => 'currency',
        'status' => 'status',
        'reference_id' => 'referenceId',
        'request_date_time' => 'requestDateTime',
        'merchant_timezone' => 'merchantTimezone',
        'card_type' => 'cardType',
        '_links' => '_links'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'account_suffix' => 'setAccountSuffix',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'reference_id' => 'setReferenceId',
        'request_date_time' => 'setRequestDateTime',
        'merchant_timezone' => 'setMerchantTimezone',
        'card_type' => 'setCardType',
        '_links' => 'setLinks'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'account_suffix' => 'getAccountSuffix',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'reference_id' => 'getReferenceId',
        'request_date_time' => 'getRequestDateTime',
        'merchant_timezone' => 'getMerchantTimezone',
        'card_type' => 'getCardType',
        '_links' => 'getLinks'
    );
  
    
    /**
      * $id Unique identifier for the transaction.
      * @var string
      */
    protected $id;
    
    /**
      * $account_suffix Last four digits of the card number.
      * @var string
      */
    protected $account_suffix;
    
    /**
      * $first_name First name of the cardholder.
      * @var string
      */
    protected $first_name;
    
    /**
      * $last_name Last name of the cardholder.
      * @var string
      */
    protected $last_name;
    
    /**
      * $amount Total amount of the transaction.
      * @var string
      */
    protected $amount;
    
    /**
      * $currency The currency used for the transaction.
      * @var string
      */
    protected $currency;
    
    /**
      * $status Status of the transaction. E.g. PendingSettlement
      * @var string
      */
    protected $status;
    
    /**
      * $reference_id Merchant reference ID for the transaction
      * @var string
      */
    protected $reference_id;
    
    /**
      * $request_date_time Time in UTC when the transaction was created.
      * @var string
      */
    protected $request_date_time;
    
    /**
      * $merchant_timezone Configured timezone for the merchant.
      * @var string
      */
    protected $merchant_timezone;
    
    /**
      * $card_type Card type, e.g. Visa, Mastercard.
      * @var string
      */
    protected $card_type;
    
    /**
      * $_links 
      * @var \CyberSource\Model\Links
      */
    protected $_links;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->account_suffix = $data["account_suffix"];
            $this->first_name = $data["first_name"];
            $this->last_name = $data["last_name"];
            $this->amount = $data["amount"];
            $this->currency = $data["currency"];
            $this->status = $data["status"];
            $this->reference_id = $data["reference_id"];
            $this->request_date_time = $data["request_date_time"];
            $this->merchant_timezone = $data["merchant_timezone"];
            $this->card_type = $data["card_type"];
            $this->_links = $data["_links"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id Unique identifier for the transaction.
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets account_suffix
     * @return string
     */
    public function getAccountSuffix()
    {
        return $this->account_suffix;
    }
  
    /**
     * Sets account_suffix
     * @param string $account_suffix Last four digits of the card number.
     * @return $this
     */
    public function setAccountSuffix($account_suffix)
    {
        
        $this->account_suffix = $account_suffix;
        return $this;
    }
    
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name First name of the cardholder.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name Last name of the cardholder.
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    
    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }
  
    /**
     * Sets amount
     * @param string $amount Total amount of the transaction.
     * @return $this
     */
    public function setAmount($amount)
    {
        
        $this->amount = $amount;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency The currency used for the transaction.
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status Status of the transaction. E.g. PendingSettlement
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets reference_id
     * @return string
     */
    public function getReferenceId()
    {
        return $this->reference_id;
    }
  
    /**
     * Sets reference_id
     * @param string $reference_id Merchant reference ID for the transaction
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        
        $this->reference_id = $reference_id;
        return $this;
    }
    
    /**
     * Gets request_date_time
     * @return string
     */
    public function getRequestDateTime()
    {
        return $this->request_date_time;
    }
  
    /**
     * Sets request_date_time
     * @param string $request_date_time Time in UTC when the transaction was created.
     * @return $this
     */
    public function setRequestDateTime($request_date_time)
    {
        
        $this->request_date_time = $request_date_time;
        return $this;
    }
    
    /**
     * Gets merchant_timezone
     * @return string
     */
    public function getMerchantTimezone()
    {
        return $this->merchant_timezone;
    }
  
    /**
     * Sets merchant_timezone
     * @param string $merchant_timezone Configured timezone for the merchant.
     * @return $this
     */
    public function setMerchantTimezone($merchant_timezone)
    {
        
        $this->merchant_timezone = $merchant_timezone;
        return $this;
    }
    
    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->card_type;
    }
  
    /**
     * Sets card_type
     * @param string $card_type Card type, e.g. Visa, Mastercard.
     * @return $this
     */
    public function setCardType($card_type)
    {
        
        $this->card_type = $card_type;
        return $this;
    }
    
    /**
     * Gets _links
     * @return \CyberSource\Model\Links
     */
    public function getLinks()
    {
        return $this->_links;
    }
  
    /**
     * Sets _links
     * @param \CyberSource\Model\Links $_links 
     * @return $this
     */
    public function setLinks($_links)
    {
        
        $this->_links = $_links;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
