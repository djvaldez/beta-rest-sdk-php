<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  CyberSource
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CyberSource\Model;

use \ArrayAccess;
/**
 * Payment Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     CyberSource
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Payment implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'card_number' => 'string',
        'card_expiration_month' => 'string',
        'card_expiration_year' => 'string',
        'card_type' => 'string',
        'card_verification_indicator' => 'string',
        'cvn' => 'string',
        'encrypted_data' => 'string',
        'encrypted_descriptor' => 'string',
        'encrypted_encoding' => 'string',
        'encrypted_key' => 'string',
        'cavv' => 'string',
        'xid' => 'string',
        'ucaf_authentication_data' => 'string',
        'ucaf_collection_indicator' => 'string',
        'network_token_transaction_type' => 'string',
        'network_token_requestor_id' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'card_number' => 'cardNumber',
        'card_expiration_month' => 'cardExpirationMonth',
        'card_expiration_year' => 'cardExpirationYear',
        'card_type' => 'cardType',
        'card_verification_indicator' => 'cardVerificationIndicator',
        'cvn' => 'cvn',
        'encrypted_data' => 'encryptedData',
        'encrypted_descriptor' => 'encryptedDescriptor',
        'encrypted_encoding' => 'encryptedEncoding',
        'encrypted_key' => 'encryptedKey',
        'cavv' => 'cavv',
        'xid' => 'xid',
        'ucaf_authentication_data' => 'ucafAuthenticationData',
        'ucaf_collection_indicator' => 'ucafCollectionIndicator',
        'network_token_transaction_type' => 'networkTokenTransactionType',
        'network_token_requestor_id' => 'networkTokenRequestorId'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'card_number' => 'setCardNumber',
        'card_expiration_month' => 'setCardExpirationMonth',
        'card_expiration_year' => 'setCardExpirationYear',
        'card_type' => 'setCardType',
        'card_verification_indicator' => 'setCardVerificationIndicator',
        'cvn' => 'setCvn',
        'encrypted_data' => 'setEncryptedData',
        'encrypted_descriptor' => 'setEncryptedDescriptor',
        'encrypted_encoding' => 'setEncryptedEncoding',
        'encrypted_key' => 'setEncryptedKey',
        'cavv' => 'setCavv',
        'xid' => 'setXid',
        'ucaf_authentication_data' => 'setUcafAuthenticationData',
        'ucaf_collection_indicator' => 'setUcafCollectionIndicator',
        'network_token_transaction_type' => 'setNetworkTokenTransactionType',
        'network_token_requestor_id' => 'setNetworkTokenRequestorId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'card_number' => 'getCardNumber',
        'card_expiration_month' => 'getCardExpirationMonth',
        'card_expiration_year' => 'getCardExpirationYear',
        'card_type' => 'getCardType',
        'card_verification_indicator' => 'getCardVerificationIndicator',
        'cvn' => 'getCvn',
        'encrypted_data' => 'getEncryptedData',
        'encrypted_descriptor' => 'getEncryptedDescriptor',
        'encrypted_encoding' => 'getEncryptedEncoding',
        'encrypted_key' => 'getEncryptedKey',
        'cavv' => 'getCavv',
        'xid' => 'getXid',
        'ucaf_authentication_data' => 'getUcafAuthenticationData',
        'ucaf_collection_indicator' => 'getUcafCollectionIndicator',
        'network_token_transaction_type' => 'getNetworkTokenTransactionType',
        'network_token_requestor_id' => 'getNetworkTokenRequestorId'
    );
  
    
    /**
      * $card_number Credit card number
      * @var string
      */
    protected $card_number;
    
    /**
      * $card_expiration_month Two digit expiration month
      * @var string
      */
    protected $card_expiration_month;
    
    /**
      * $card_expiration_year Four digit expiration year
      * @var string
      */
    protected $card_expiration_year;
    
    /**
      * $card_type Card Type
      * @var string
      */
    protected $card_type;
    
    /**
      * $card_verification_indicator Flag that indicates whether a CVN code was sent
      * @var string
      */
    protected $card_verification_indicator;
    
    /**
      * $cvn Card Verification Number
      * @var string
      */
    protected $cvn;
    
    /**
      * $encrypted_data Encrypted Payment Data
      * @var string
      */
    protected $encrypted_data;
    
    /**
      * $encrypted_descriptor Format of the encrypted payment data
      * @var string
      */
    protected $encrypted_descriptor;
    
    /**
      * $encrypted_encoding Encoding method used to encrypt the payment data
      * @var string
      */
    protected $encrypted_encoding;
    
    /**
      * $encrypted_key Encrypted key that CyberSource uses to decrypt the payment data
      * @var string
      */
    protected $encrypted_key;
    
    /**
      * $cavv Cryptogram for payment network tokenization transactions. The value for this field must be 28-character base64 or 40-character hex binary
      * @var string
      */
    protected $cavv;
    
    /**
      * $xid Cryptogram for payment network tokenization transactions
      * @var string
      */
    protected $xid;
    
    /**
      * $ucaf_authentication_data Cryptogram for payment network tokenization transactions with MasterCard.
      * @var string
      */
    protected $ucaf_authentication_data;
    
    /**
      * $ucaf_collection_indicator Required field for payment network tokenization transactions with MasterCard
      * @var string
      */
    protected $ucaf_collection_indicator;
    
    /**
      * $network_token_transaction_type Type of transaction that provided the token data
      * @var string
      */
    protected $network_token_transaction_type;
    
    /**
      * $network_token_requestor_id Value that identifies your business and indicates that the cardholderâ€™s account number is tokenized
      * @var string
      */
    protected $network_token_requestor_id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->card_number = $data["card_number"];
            $this->card_expiration_month = $data["card_expiration_month"];
            $this->card_expiration_year = $data["card_expiration_year"];
            $this->card_type = $data["card_type"];
            $this->card_verification_indicator = $data["card_verification_indicator"];
            $this->cvn = $data["cvn"];
            $this->encrypted_data = $data["encrypted_data"];
            $this->encrypted_descriptor = $data["encrypted_descriptor"];
            $this->encrypted_encoding = $data["encrypted_encoding"];
            $this->encrypted_key = $data["encrypted_key"];
            $this->cavv = $data["cavv"];
            $this->xid = $data["xid"];
            $this->ucaf_authentication_data = $data["ucaf_authentication_data"];
            $this->ucaf_collection_indicator = $data["ucaf_collection_indicator"];
            $this->network_token_transaction_type = $data["network_token_transaction_type"];
            $this->network_token_requestor_id = $data["network_token_requestor_id"];
        }
    }
    
    /**
     * Gets card_number
     * @return string
     */
    public function getCardNumber()
    {
        return $this->card_number;
    }
  
    /**
     * Sets card_number
     * @param string $card_number Credit card number
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        
        $this->card_number = $card_number;
        return $this;
    }
    
    /**
     * Gets card_expiration_month
     * @return string
     */
    public function getCardExpirationMonth()
    {
        return $this->card_expiration_month;
    }
  
    /**
     * Sets card_expiration_month
     * @param string $card_expiration_month Two digit expiration month
     * @return $this
     */
    public function setCardExpirationMonth($card_expiration_month)
    {
        
        $this->card_expiration_month = $card_expiration_month;
        return $this;
    }
    
    /**
     * Gets card_expiration_year
     * @return string
     */
    public function getCardExpirationYear()
    {
        return $this->card_expiration_year;
    }
  
    /**
     * Sets card_expiration_year
     * @param string $card_expiration_year Four digit expiration year
     * @return $this
     */
    public function setCardExpirationYear($card_expiration_year)
    {
        
        $this->card_expiration_year = $card_expiration_year;
        return $this;
    }
    
    /**
     * Gets card_type
     * @return string
     */
    public function getCardType()
    {
        return $this->card_type;
    }
  
    /**
     * Sets card_type
     * @param string $card_type Card Type
     * @return $this
     */
    public function setCardType($card_type)
    {
        
        $this->card_type = $card_type;
        return $this;
    }
    
    /**
     * Gets card_verification_indicator
     * @return string
     */
    public function getCardVerificationIndicator()
    {
        return $this->card_verification_indicator;
    }
  
    /**
     * Sets card_verification_indicator
     * @param string $card_verification_indicator Flag that indicates whether a CVN code was sent
     * @return $this
     */
    public function setCardVerificationIndicator($card_verification_indicator)
    {
        
        $this->card_verification_indicator = $card_verification_indicator;
        return $this;
    }
    
    /**
     * Gets cvn
     * @return string
     */
    public function getCvn()
    {
        return $this->cvn;
    }
  
    /**
     * Sets cvn
     * @param string $cvn Card Verification Number
     * @return $this
     */
    public function setCvn($cvn)
    {
        
        $this->cvn = $cvn;
        return $this;
    }
    
    /**
     * Gets encrypted_data
     * @return string
     */
    public function getEncryptedData()
    {
        return $this->encrypted_data;
    }
  
    /**
     * Sets encrypted_data
     * @param string $encrypted_data Encrypted Payment Data
     * @return $this
     */
    public function setEncryptedData($encrypted_data)
    {
        
        $this->encrypted_data = $encrypted_data;
        return $this;
    }
    
    /**
     * Gets encrypted_descriptor
     * @return string
     */
    public function getEncryptedDescriptor()
    {
        return $this->encrypted_descriptor;
    }
  
    /**
     * Sets encrypted_descriptor
     * @param string $encrypted_descriptor Format of the encrypted payment data
     * @return $this
     */
    public function setEncryptedDescriptor($encrypted_descriptor)
    {
        
        $this->encrypted_descriptor = $encrypted_descriptor;
        return $this;
    }
    
    /**
     * Gets encrypted_encoding
     * @return string
     */
    public function getEncryptedEncoding()
    {
        return $this->encrypted_encoding;
    }
  
    /**
     * Sets encrypted_encoding
     * @param string $encrypted_encoding Encoding method used to encrypt the payment data
     * @return $this
     */
    public function setEncryptedEncoding($encrypted_encoding)
    {
        
        $this->encrypted_encoding = $encrypted_encoding;
        return $this;
    }
    
    /**
     * Gets encrypted_key
     * @return string
     */
    public function getEncryptedKey()
    {
        return $this->encrypted_key;
    }
  
    /**
     * Sets encrypted_key
     * @param string $encrypted_key Encrypted key that CyberSource uses to decrypt the payment data
     * @return $this
     */
    public function setEncryptedKey($encrypted_key)
    {
        
        $this->encrypted_key = $encrypted_key;
        return $this;
    }
    
    /**
     * Gets cavv
     * @return string
     */
    public function getCavv()
    {
        return $this->cavv;
    }
  
    /**
     * Sets cavv
     * @param string $cavv Cryptogram for payment network tokenization transactions. The value for this field must be 28-character base64 or 40-character hex binary
     * @return $this
     */
    public function setCavv($cavv)
    {
        
        $this->cavv = $cavv;
        return $this;
    }
    
    /**
     * Gets xid
     * @return string
     */
    public function getXid()
    {
        return $this->xid;
    }
  
    /**
     * Sets xid
     * @param string $xid Cryptogram for payment network tokenization transactions
     * @return $this
     */
    public function setXid($xid)
    {
        
        $this->xid = $xid;
        return $this;
    }
    
    /**
     * Gets ucaf_authentication_data
     * @return string
     */
    public function getUcafAuthenticationData()
    {
        return $this->ucaf_authentication_data;
    }
  
    /**
     * Sets ucaf_authentication_data
     * @param string $ucaf_authentication_data Cryptogram for payment network tokenization transactions with MasterCard.
     * @return $this
     */
    public function setUcafAuthenticationData($ucaf_authentication_data)
    {
        
        $this->ucaf_authentication_data = $ucaf_authentication_data;
        return $this;
    }
    
    /**
     * Gets ucaf_collection_indicator
     * @return string
     */
    public function getUcafCollectionIndicator()
    {
        return $this->ucaf_collection_indicator;
    }
  
    /**
     * Sets ucaf_collection_indicator
     * @param string $ucaf_collection_indicator Required field for payment network tokenization transactions with MasterCard
     * @return $this
     */
    public function setUcafCollectionIndicator($ucaf_collection_indicator)
    {
        
        $this->ucaf_collection_indicator = $ucaf_collection_indicator;
        return $this;
    }
    
    /**
     * Gets network_token_transaction_type
     * @return string
     */
    public function getNetworkTokenTransactionType()
    {
        return $this->network_token_transaction_type;
    }
  
    /**
     * Sets network_token_transaction_type
     * @param string $network_token_transaction_type Type of transaction that provided the token data
     * @return $this
     */
    public function setNetworkTokenTransactionType($network_token_transaction_type)
    {
        
        $this->network_token_transaction_type = $network_token_transaction_type;
        return $this;
    }
    
    /**
     * Gets network_token_requestor_id
     * @return string
     */
    public function getNetworkTokenRequestorId()
    {
        return $this->network_token_requestor_id;
    }
  
    /**
     * Sets network_token_requestor_id
     * @param string $network_token_requestor_id Value that identifies your business and indicates that the cardholderâ€™s account number is tokenized
     * @return $this
     */
    public function setNetworkTokenRequestorId($network_token_requestor_id)
    {
        
        $this->network_token_requestor_id = $network_token_requestor_id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
